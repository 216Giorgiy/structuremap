<!--Title: A Gentle Quickstart-->
<!--Url: quickstart-->

<markdown>
The first thing you should know is that StructureMap (and other IoC tools like it) are designed to
make compositional and modular software designs easier to build by offloading the grubby mechanics of
resolving dependencies, reading configuration data, and assembling object graphs to the IoC tool instead
of cluttering up your application code.

Before you get started with StructureMap it's recommended that you first get comfortable with the <TopicLink name="concepts" /> 
of [Dependency Injection](http://codebetter.com/jeremymiller/2005/10/06/the-dependency-injection-pattern-%E2%80%93-what-is-it-and-why-do-i-care/) 
and [Inversion Of Control](http://codebetter.com/jeremymiller/2005/09/20/what%E2%80%99s-so-great-about-inversion-of-control/). 
It's important that you structure and build your application with these concepts in mind to fully utilize StructureMap's abilities.

Assuming that you're already familiar with those concepts, or you'd really rather skip the pedantry and jump right into concrete code, the first thing to do is, go <TopicLink name="get-structuremap" /> and jump into usage.

<Section title="Main Usage" id="main-usage">

By and large, you really only do two kinds of things with StructureMap:

1. Configure the container by registering the **what** and **how** StructureMap should build or find requested services based on a type and/or name.

2. Resolve object instances of a service or dependency built out with all of its dependencies.

So let's say that you have a simple object model like so:
<Snippet name="foobar-model" />

You could explicitly build a StructureMap `Container` object to build these types like this:

<Snippet name="foobar-quickstart1" />

or utilize StructureMap's type scanning conventions to configure the relationships and do the same thing like this:

<Snippet name="foobar-quickstart2" />

</Section>




<Section title="An even simpler usage" id="an-even-simpler-usage">

There is an even a simpler usage than the main usage because StructureMap allows you to resolve instances without configuring the container. StructureMap is able to resolve **concrete types** without configuration as long as it has a default constructor or a constructor where the arguments are concrete types too.  It's important that the entire tree of constructor arguments are concrete types where eventually all leave types have a default constructor.

Let's say we have the following object model, which represents the weather condition for a certain location.

<Snippet name="concrete-weather-model" />

Before we can resolve the concrete `Weather` type, we need an instance of an `Container` object or `ObjectFactory`. As mentioned earlier, these objects defines a generic `GetInstance` method which can build us an instance of the `Weather` type.

You can create a container yourself or use the statically accessed container.

<Snippet name="quickstart-resolve-concrete-types" />


The reason why we don't need to supply any configuration is because StructureMap supports a concept called <TopicLink name="the-container/auto-wiring" />. It's basically a smart way of building instances of types by looking to the constructors of the requested and all the needed underlaying types. During this inspection StructureMap also uses any provided configuration to help building the requested service or dependency.

In our example, where there isn't any configuration available, StructureMap looks at the constructor of the requested `Weather` type. It sees that it depends on four concrete types which all have a default constructor. StructureMap is therefor able to create an instance for all of them and inject them into the `Weather` constructor. After that the `Weather` instance is returned to the caller.

Most of the time you will be mapping abstractions to concrete types, but as you have seen StructureMap supports other use cases as well.

</Section>

<Section title="Integrating StructureMap within your application" id="integration">

At some point you will want to integrate StructureMap into your application. Whether you are using Windows Presentation Foundation (WPF), FubuMVC, ASP.NET WebForms, ASP.NET MVC or any other framework or technology, you will have to do some sort of plumbing and bootstrapping. Depending on the used technology or framework there can be important integration points that you will have to use to fully enable the power of StructureMap.

While StructureMap doesn't provide integration support out of the box for all of the frameworks and technologies out there, we do find it important to help you get started with integrating StructureMap into your application. That said, StructureMap does provide integration support for [FubuMVC](http://fubuworld.com/fubumvc) (a web framework, which is part of the same family as StructureMap).

We have created some starter integration guides for the most common frameworks and technologies. Those guides aren't the one and true way, most of the time, integrating StructureMap can be done in various ways.

- <TopicLink name="integrations" />

	- <TopicLink name="integrations/fubumvc-and-fubutransportation" />
	- <TopicLink name="integrations/aspnet-mvc" />
	- <TopicLink name="integrations/Web-API" />
	- <TopicLink name="integrations/nancyfx" />
	- <TopicLink name="integrations/simpleweb" />
	- <TopicLink name="integrations/signalr" />
	- <TopicLink name="integrations/nservicebus" />
	- <TopicLink name="integrations/masstransit" />
	- <TopicLink name="integrations/entity-framework" />
	- <TopicLink name="integrations/nhibernate" />
	- <TopicLink name="integrations/automapper" />

</Section>
<Section title="What to do when things go wrong?" id="when-things-go-wrong">

StructureMap, and any other IoC tool for that matter, is configuration intensive, which means that their will be problems in that configuration. We're all moving to more convention based type registration, so more stuff is happening off stage and out of your sight, making debugging the configuration even trickier. Not to worry (too much), StructureMap has some diagnostic abilities to help you solve configuration problems:

- <TopicLink name="interpreting-exceptions" />
- <TopicLink name="diagnostics" />
	- <TopicLink name="diagnostics/whatdoihave" />
	- <TopicLink name="diagnostics/validating-container-configuration" />
	- <TopicLink name="diagnostics/environment-tests" />
	- <TopicLink name="diagnostics/build-plans" />
	- <TopicLink name="diagnostics/using-the-container-model" />

</Section>

<Section title="Need Help?" id="need-help">

- There is a [google group](http://groups.google.com/group/structuremap-users?hl=en) for StructureMap support.
- You can ask questions on [StackOverflow](http://stackoverflow.com/).

</Section>

</markdown>

